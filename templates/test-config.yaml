# Test Configuration Template
# Comprehensive testing setup for all project types

# Test Framework Configuration
test_frameworks:
  unit:
    framework: "jest"  # or vitest, mocha
    config_file: "jest.config.js"
    coverage:
      threshold:
        global:
          lines: 90
          functions: 90
          branches: 85
          statements: 90
        per_file:
          lines: 80
          functions: 80
          branches: 75
          statements: 80
      collect_from:
        - "src/**/*.{ts,js,jsx,tsx}"
      ignore:
        - "src/**/*.d.ts"
        - "src/**/*.test.{ts,js,jsx,tsx}"
        - "src/**/__tests__/**"
        - "src/test-utils/**"
        - "src/scripts/**"
      reporters:
        - "text"
        - "lcov"
        - "html"
        - "json-summary"

  integration:
    framework: "jest"  # or supertest
    config_file: "jest.integration.config.js"
    test_environment: "node"
    timeout: 30000
    setup_files:
      - "tests/setup/integration-setup.ts"
    teardown_files:
      - "tests/setup/integration-teardown.ts"
    database:
      strategy: "testcontainers"  # or docker-compose, in-memory
      cleanup: "after-each"  # or after-all
      isolation: "transaction"

  e2e:
    framework: "playwright"  # or cypress, puppeteer
    config_file: "playwright.config.ts"
    browsers:
      - "chromium"
      - "firefox"
      - "webkit"
    parallel: true
    retries: 2
    timeout: 30000
    base_url: "http://localhost:3000"
    test_data:
      strategy: "factories"  # or fixtures, api-setup
      cleanup: "automatic"

# Test Execution Strategy
execution:
  pipeline:
    stages:
      - name: "unit"
        parallel: true
        timeout: 10  # minutes
        required: true
        coverage: true
      - name: "integration"
        parallel: false
        timeout: 30  # minutes
        required: true
        depends_on: ["unit"]
      - name: "e2e"
        parallel: true
        timeout: 60  # minutes
        required: true
        depends_on: ["integration"]
      - name: "security"
        parallel: true
        timeout: 15  # minutes
        required: true
        depends_on: ["unit"]
      - name: "performance"
        parallel: false
        timeout: 45  # minutes
        required: false
        depends_on: ["integration"]

  environments:
    local:
      database: "sqlite"
      external_services: "mocked"
      parallel_workers: 4
    ci:
      database: "postgresql"
      external_services: "testcontainers"
      parallel_workers: 2
    staging:
      database: "postgresql-staging"
      external_services: "real"
      parallel_workers: 1

# Quality Gates
quality_gates:
  deployment_blocking:
    - name: "test_execution"
      requirement: "zero_failures"
      severity: "blocker"
    - name: "code_coverage"
      requirement: "meet_thresholds"
      severity: "blocker"
    - name: "security_tests"
      requirement: "zero_high_severity"
      severity: "blocker"
    - name: "performance_regression"
      requirement: "no_degradation"
      severity: "blocker"

  warnings:
    - name: "test_quality"
      requirement: "low_flaky_rate"
      severity: "warning"
      threshold: 2  # percent
    - name: "test_execution_time"
      requirement: "within_limits"
      severity: "warning"
      limits:
        unit: 300  # seconds
        integration: 1800  # seconds
        e2e: 3600  # seconds

# Test Data Management
test_data:
  strategy: "factories"  # or fixtures, seeds, api
  factories:
    location: "tests/factories"
    naming_convention: "{model}Factory"
    traits: true
    sequences: true
  fixtures:
    location: "tests/fixtures"
    format: "json"  # or yaml, sql
    versioning: true
  cleanup:
    strategy: "automatic"  # or manual, scheduled
    retention_days: 7

# Reporting & Analytics
reporting:
  formats:
    - "junit"
    - "html"
    - "json"
    - "lcov"
  destinations:
    - type: "file"
      path: "test-results/"
    - type: "s3"
      bucket: "test-reports-bucket"
      prefix: "reports/{date}/"
    - type: "slack"
      webhook_url: "${SLACK_WEBHOOK_URL}"
      channels: ["#engineering", "#quality"]
  
  analytics:
    trends: true
    flaky_detection: true
    performance_tracking: true
    coverage_history: true
    quality_metrics: true

# Monitoring & Alerts
monitoring:
  flaky_tests:
    threshold: 3  # failures in last 10 runs
    action: "auto_quarantine"
    notification: true
  
  slow_tests:
    unit_threshold: 1000  # milliseconds
    integration_threshold: 10000  # milliseconds
    action: "flag_for_review"
  
  coverage_regression:
    threshold: 2  # percent decrease
    action: "block_merge"
    notification: true

# Tool Integration
tools:
  ci_cd:
    primary: "github_actions"  # or gitlab_ci, jenkins
    config_files:
      - ".github/workflows/test.yml"
      - ".github/workflows/quality-gates.yml"
  
  code_quality:
    sonarqube:
      enabled: true
      quality_gate: "sonar_way"
    codecov:
      enabled: true
      threshold: 90
  
  notifications:
    slack:
      webhook_url: "${SLACK_WEBHOOK_URL}"
      channels:
        success: "#engineering"
        failure: "#alerts"
    email:
      smtp_config: "${EMAIL_CONFIG}"
      recipients:
        - "team-lead@company.com"
        - "qa-team@company.com"

# Performance Testing
performance:
  load_testing:
    tool: "k6"  # or jmeter, artillery
    scenarios:
      - name: "normal_load"
        virtual_users: 100
        duration: "5m"
        ramp_up: "30s"
      - name: "spike_test"
        virtual_users: 500
        duration: "2m"
        ramp_up: "10s"
    thresholds:
      response_time_p95: 500  # milliseconds
      error_rate: 1  # percent
      throughput_min: 100  # requests per second

  stress_testing:
    enabled: true
    schedule: "weekly"
    duration: "30m"
    max_virtual_users: 1000

# Security Testing
security:
  static_analysis:
    tool: "sonarqube"  # or snyk, checkmarx
    fail_on: "high"  # severity level
  
  dependency_scanning:
    tool: "npm_audit"  # or snyk, whitesource
    auto_fix: true
    fail_on: "high"
  
  dynamic_testing:
    tool: "owasp_zap"  # or burp, netsparker
    baseline_scan: true
    full_scan: false  # only on release branches
  
  secrets_scanning:
    tool: "gitleaks"  # or truffleHog, detect-secrets
    pre_commit: true
    ci_validation: true

# Documentation
documentation:
  test_plans:
    location: "docs/testing/"
    format: "markdown"
    versioning: true
  
  test_results:
    public_reports: true
    historical_data: true
    trend_analysis: true
  
  quality_metrics:
    dashboard_url: "https://quality-dashboard.company.com"
    update_frequency: "real-time"

# Maintenance
maintenance:
  test_cleanup:
    schedule: "weekly"
    remove_obsolete: true
    archive_old_results: true
  
  dependency_updates:
    schedule: "monthly"
    auto_merge: false
    security_patches: "immediate"
  
  performance_review:
    schedule: "quarterly"
    optimize_slow_tests: true
    review_coverage_gaps: true 